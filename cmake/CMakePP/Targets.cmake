include(CMakeParseArguments)

function(_cpp_apply_common target)
  if(CMAKEPP_ENABLE_WARNINGS)
    cpp_target_warnings(${target})
  endif()
  if(CMAKEPP_ENABLE_SANITIZERS)
    cpp_target_sanitizers(${target} DEFAULT)
  endif()
endfunction()

function(cpp_add_library name)
  set(options)
  set(oneValueArgs TYPE CXX_STANDARD WARNINGS_LEVEL)
  set(multiValueArgs SOURCES PUBLIC_HEADERS INCLUDE_DIRS PRIVATE_INCLUDE_DIRS PUBLIC_LINK PRIVATE_LINK DEFINES)
  cmake_parse_arguments(T "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

  if(NOT T_TYPE)
    set(T_TYPE STATIC)
  endif()

  if(NOT T_SOURCES)
    message(FATAL_ERROR "cpp_add_library(${name}): SOURCES are required")
  endif()

  add_library(${name} ${T_TYPE} ${T_SOURCES})
  add_library(${name}::${name} ALIAS ${name})

  if(NOT T_TYPE STREQUAL "INTERFACE")
    set_target_properties(${name} PROPERTIES POSITION_INDEPENDENT_CODE ON)
  endif()

  if(T_CXX_STANDARD)
    set_target_properties(${name} PROPERTIES CXX_STANDARD ${T_CXX_STANDARD} CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO)
  elseif(DEFINED CMAKEPP_CXX_STANDARD AND NOT CMAKEPP_CXX_STANDARD STREQUAL "")
    set_target_properties(${name} PROPERTIES CXX_STANDARD ${CMAKEPP_CXX_STANDARD} CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO)
  endif()

  if(T_INCLUDE_DIRS)
    target_include_directories(${name} PUBLIC ${T_INCLUDE_DIRS})
  endif()
  if(T_PRIVATE_INCLUDE_DIRS)
    target_include_directories(${name} PRIVATE ${T_PRIVATE_INCLUDE_DIRS})
  endif()
  if(T_PUBLIC_LINK)
    target_link_libraries(${name} PUBLIC ${T_PUBLIC_LINK})
  endif()
  if(T_PRIVATE_LINK)
    target_link_libraries(${name} PRIVATE ${T_PRIVATE_LINK})
  endif()
  if(T_DEFINES)
    target_compile_definitions(${name} PUBLIC ${T_DEFINES})
  endif()

  if(T_WARNINGS_LEVEL)
    cpp_target_warnings(${name} LEVEL ${T_WARNINGS_LEVEL})
  else()
    _cpp_apply_common(${name})
  endif()

  if(T_PUBLIC_HEADERS)
    set_target_properties(${name} PROPERTIES PUBLIC_HEADER "${T_PUBLIC_HEADERS}")
  endif()
endfunction()

function(cpp_add_executable name)
  set(options)
  set(oneValueArgs CXX_STANDARD WARNINGS_LEVEL)
  set(multiValueArgs SOURCES INCLUDE_DIRS PRIVATE_INCLUDE_DIRS PUBLIC_LINK PRIVATE_LINK DEFINES)
  cmake_parse_arguments(T "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

  if(NOT T_SOURCES)
    message(FATAL_ERROR "cpp_add_executable(${name}): SOURCES are required")
  endif()

  add_executable(${name} ${T_SOURCES})

  if(T_CXX_STANDARD)
    set_target_properties(${name} PROPERTIES CXX_STANDARD ${T_CXX_STANDARD} CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO)
  elseif(DEFINED CMAKEPP_CXX_STANDARD AND NOT CMAKEPP_CXX_STANDARD STREQUAL "")
    set_target_properties(${name} PROPERTIES CXX_STANDARD ${CMAKEPP_CXX_STANDARD} CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO)
  endif()

  if(T_INCLUDE_DIRS)
    target_include_directories(${name} PUBLIC ${T_INCLUDE_DIRS})
  endif()
  if(T_PRIVATE_INCLUDE_DIRS)
    target_include_directories(${name} PRIVATE ${T_PRIVATE_INCLUDE_DIRS})
  endif()
  if(T_PUBLIC_LINK)
    target_link_libraries(${name} PUBLIC ${T_PUBLIC_LINK})
  endif()
  if(T_PRIVATE_LINK)
    target_link_libraries(${name} PRIVATE ${T_PRIVATE_LINK})
  endif()
  if(T_DEFINES)
    target_compile_definitions(${name} PUBLIC ${T_DEFINES})
  endif()

  if(T_WARNINGS_LEVEL)
    cpp_target_warnings(${name} LEVEL ${T_WARNINGS_LEVEL})
  else()
    _cpp_apply_common(${name})
  endif()
endfunction()
