include(CMakeParseArguments)

function(cpp_target_warnings target)
  if(NOT TARGET ${target})
    message(FATAL_ERROR "cpp_target_warnings: Target ${target} not found")
  endif()

  set(options)
  set(oneValueArgs LEVEL)
  set(multiValueArgs)
  cmake_parse_arguments(W "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

  if(NOT W_LEVEL)
    set(W_LEVEL "high")
  endif()

  if(MSVC)
    if(W_LEVEL STREQUAL "off")
      target_compile_options(${target} PRIVATE /W0)
    elseif(W_LEVEL STREQUAL "low")
      target_compile_options(${target} PRIVATE /W2)
    elseif(W_LEVEL STREQUAL "high")
      target_compile_options(${target} PRIVATE /W4)
    elseif(W_LEVEL STREQUAL "pedantic")
      target_compile_options(${target} PRIVATE /W4 /permissive-)
    endif()
    if(CMAKEPP_WARNINGS_AS_ERRORS)
      target_compile_options(${target} PRIVATE /WX)
    endif()
  else()
    set(common -Wall -Wextra -Wconversion -Wsign-conversion -Wshadow -Wnon-virtual-dtor -Wold-style-cast -Woverloaded-virtual -Wpedantic -Wformat=2)
    if(W_LEVEL STREQUAL "off")
      set(common "")
    elseif(W_LEVEL STREQUAL "low")
      set(common -Wall -Wextra)
    elseif(W_LEVEL STREQUAL "high")
      set(common ${common})
    elseif(W_LEVEL STREQUAL "pedantic")
      list(APPEND common -Wcast-qual -Wcast-align -Wdouble-promotion -Wnull-dereference -Wimplicit-fallthrough)
    endif()
    if(common)
      target_compile_options(${target} PRIVATE ${common})
    endif()
    if(CMAKEPP_WARNINGS_AS_ERRORS)
      target_compile_options(${target} PRIVATE -Werror)
    endif()
  endif()
endfunction()
